{
    "collab_server" : "",
    "contents" : "#前置準備動作(倉庫大小，物品種類.數量.長寬高)\nwarehouse <- c(40,30,30)#倉庫長寬高\ncommodity_inf <- matrix(c(10,20,25,5,10,10,15,5,20,5,20,25,5,15,10), nrow = 3, ncol = 5)#物品種類資訊(五種)\ncommodity_qua <- c(2,3,1,1,3)#對應五種物品種類的物品數量，總共10個物品\ncorrespond_table <- c(1,1,2,2,3,3,3,4,4,4,5,6,7,8,9,9,9,10,10,10)#對應表，高不動，物品旋轉看作兩種物品，例如1跟2是同一個物品\nmutation_probability <- 5#突變機率\nfrequency <- 1000#執行次數\n\n#最大跑過31750\n\n#初始化(亂數決定五個染色體分別擺入物品順序)\ninitialization <- function(){\n  \n  qua_1 <- commodity_qua\n  qua_2 <- commodity_qua\n  qua_3 <- commodity_qua\n  qua_4 <- commodity_qua\n  qua_5 <- commodity_qua\n  for(i in c(1:10)){\n    \n    a1 <- sample(20,1)\n    a2 <- sample(20,1)\n    a3 <- sample(20,1)\n    a4 <- sample(20,1)\n    a5 <- sample(20,1)\n    while(qua_1[ceiling(correspond_table[a1]/2)]<1){a1 <- sample(20,1)}\n    while(qua_2[ceiling(correspond_table[a2]/2)]<1){a2 <- sample(20,1)}\n    while(qua_3[ceiling(correspond_table[a3]/2)]<1){a3 <- sample(20,1)}\n    while(qua_4[ceiling(correspond_table[a4]/2)]<1){a4 <- sample(20,1)}\n    while(qua_5[ceiling(correspond_table[a5]/2)]<1){a5 <- sample(20,1)}\n    qua_1[ceiling(correspond_table[a1]/2)] <- qua_1[ceiling(correspond_table[a1]/2)]-1\n    qua_2[ceiling(correspond_table[a2]/2)] <- qua_2[ceiling(correspond_table[a2]/2)]-1\n    qua_3[ceiling(correspond_table[a3]/2)] <- qua_3[ceiling(correspond_table[a3]/2)]-1\n    qua_4[ceiling(correspond_table[a4]/2)] <- qua_4[ceiling(correspond_table[a4]/2)]-1\n    qua_5[ceiling(correspond_table[a5]/2)] <- qua_5[ceiling(correspond_table[a5]/2)]-1\n    chromosomes_1[i] <<- correspond_table[a1]\n    chromosomes_2[i] <<- correspond_table[a2]\n    chromosomes_3[i] <<- correspond_table[a3]\n    chromosomes_4[i] <<- correspond_table[a4]\n    chromosomes_5[i] <<- correspond_table[a5]\n    \n  }\n  \n}\n\n\n\n#交配(使用Partially-mapped crossover，一共交配兩次，因此會產出四個新chromosome)\ncrossover <- function(){\n  \n  range_1 <- sort(sample(9,2))\n  temp_1 <- c()\n  temp_2 <- c()\n  sel_1_cou <- commodity_qua\n  sel_2_cou <- commodity_qua\n  \n\n  \n  #第一次交配\n  for(i in c((range_1[1]+1):range_1[2])){\n    sel_1_cou[ceiling(select_2[i]/2)] <- sel_1_cou[ceiling(select_2[i]/2)]-1\n    sel_2_cou[ceiling(select_1[i]/2)] <- sel_2_cou[ceiling(select_1[i]/2)]-1\n    chromosomes_1[i] <<- select_2[i]\n    chromosomes_2[i] <<- select_1[i]\n  }\n  for(i in c(1:range_1[1])){\n    if(sel_1_cou[ceiling(select_1[i]/2)]>0){\n      chromosomes_1[i]<<-select_1[i]\n      sel_1_cou[ceiling(select_1[i]/2)] <- sel_1_cou[ceiling(select_1[i]/2)]-1\n    }else{\n      temp_1 <- c(temp_1,i)\n    }\n    if(sel_2_cou[ceiling(select_2[i]/2)]>0){\n      chromosomes_2[i]<<-select_2[i]\n      sel_2_cou[ceiling(select_2[i]/2)] <- sel_2_cou[ceiling(select_2[i]/2)]-1\n    }else{\n      temp_2 <- c(temp_2,i)\n    }\n  }\n  for(i in c((range_1[2]+1):10)){\n    if(sel_1_cou[ceiling(select_1[i]/2)]>0){\n      chromosomes_1[i]<<-select_1[i]\n      sel_1_cou[ceiling(select_1[i]/2)] <- sel_1_cou[ceiling(select_1[i]/2)]-1\n    }else{\n      temp_1 <- c(temp_1,i)\n    }\n    if(sel_2_cou[ceiling(select_2[i]/2)]>0){\n      chromosomes_2[i]<<-select_2[i]\n      sel_2_cou[ceiling(select_2[i]/2)] <- sel_2_cou[ceiling(select_2[i]/2)]-1\n    }else{\n      temp_2 <- c(temp_2,i)\n    }\n  }\n  a<-1\n  for(i in c((range_1[1]+1):range_1[2])){\n    if(sel_1_cou[ceiling(select_1[i]/2)]>0){\n      chromosomes_1[temp_1[a]]<<-select_1[i]\n      sel_1_cou[ceiling(select_1[i]/2)] <- sel_1_cou[ceiling(select_1[i]/2)]-1\n      a<-a+1\n    }\n  }\n  a<-1\n  for(i in c((range_1[1]+1):range_1[2])){\n    if(sel_2_cou[ceiling(select_2[i]/2)]>0){\n      chromosomes_2[temp_2[a]]<<-select_2[i]\n      sel_2_cou[ceiling(select_2[i]/2)] <- sel_2_cou[ceiling(select_2[i]/2)]-1\n      a<-a+1\n    }\n  }\n  \n  \n  range_2 <- sort(sample(9,2))\n  temp_1 <- c()\n  temp_2 <- c()\n  sel_1_cou <- commodity_qua\n  sel_2_cou <- commodity_qua\n  \n  #第二次交配\n  for(i in c((range_2[1]+1):range_2[2])){\n    sel_1_cou[ceiling(select_2[i]/2)] <- sel_1_cou[ceiling(select_2[i]/2)]-1\n    sel_2_cou[ceiling(select_1[i]/2)] <- sel_2_cou[ceiling(select_1[i]/2)]-1\n    chromosomes_3[i] <<- select_2[i]\n    chromosomes_4[i] <<- select_1[i]\n  }\n  for(i in c(1:range_2[1])){\n    if(sel_1_cou[ceiling(select_1[i]/2)]>0){\n      chromosomes_3[i]<<-select_1[i]\n      sel_1_cou[ceiling(select_1[i]/2)] <- sel_1_cou[ceiling(select_1[i]/2)]-1\n    }else{\n      temp_1 <- c(temp_1,i)\n    }\n    if(sel_2_cou[ceiling(select_2[i]/2)]>0){\n      chromosomes_4[i]<<-select_2[i]\n      sel_2_cou[ceiling(select_2[i]/2)] <- sel_2_cou[ceiling(select_2[i]/2)]-1\n    }else{\n      temp_2 <- c(temp_2,i)\n    }\n  }\n  for(i in c((range_2[2]+1):10)){\n    if(sel_1_cou[ceiling(select_1[i]/2)]>0){\n      chromosomes_3[i]<<-select_1[i]\n      sel_1_cou[ceiling(select_1[i]/2)] <- sel_1_cou[ceiling(select_1[i]/2)]-1\n    }else{\n      temp_1 <- c(temp_1,i)\n    }\n    if(sel_2_cou[ceiling(select_2[i]/2)]>0){\n      chromosomes_4[i]<<-select_2[i]\n      sel_2_cou[ceiling(select_2[i]/2)] <- sel_2_cou[ceiling(select_2[i]/2)]-1\n    }else{\n      temp_2 <- c(temp_2,i)\n    }\n  }\n  a<-1\n  for(i in c((range_2[1]+1):range_2[2])){\n    if(sel_1_cou[ceiling(select_1[i]/2)]>0){\n      chromosomes_3[temp_1[a]]<<-select_1[i]\n      sel_1_cou[ceiling(select_1[i]/2)] <- sel_1_cou[ceiling(select_1[i]/2)]-1\n      a<-a+1\n    }\n  }\n  a<-1\n  for(i in c((range_2[1]+1):range_2[2])){\n    if(sel_2_cou[ceiling(select_2[i]/2)]>0){\n      chromosomes_4[temp_2[a]]<<-select_2[i]\n      sel_2_cou[ceiling(select_2[i]/2)] <- sel_2_cou[ceiling(select_2[i]/2)]-1\n      a<-a+1\n    }\n  }\n  \n}\n\n\n\n#突變(使用Frame-Shift mutation移碼突變 && Whole-gene mutation全基因突變，全基因突變的突變結果只影響突變物品的旋轉擺放，例如:1突變只會變2)\nmutation <- function(){\n  \n  \n  a<-sample(1:100,size=4,replace=T)\n  if(a[1]<=mutation_probability){\n    temp <- chromosomes_1[10]\n    temp2 <- chromosomes_1[c(1:9)]\n    chromosomes_1 <<- c(temp,temp2)\n  }\n  if(a[2]<=mutation_probability){\n    temp <- chromosomes_2[10]\n    temp2 <- chromosomes_2[c(1:9)]\n    chromosomes_2 <<- c(temp,temp2)\n  }\n  if(a[3]<=mutation_probability){\n    temp <- chromosomes_3[10]\n    temp2 <- chromosomes_3[c(1:9)]\n    chromosomes_3 <<- c(temp,temp2)\n  }\n  if(a[4]<=mutation_probability){\n    temp <- chromosomes_4[10]\n    temp2 <- chromosomes_4[c(1:9)]\n    chromosomes_4 <<- c(temp,temp2)\n  }\n  \n  \n  \n  for(i in c(1:10)){\n    a<-sample(100,1)\n    if(a<=mutation_probability){\n      if((chromosomes_1[i]%%2)==1){\n        chromosomes_1[i] <<- chromosomes_1[i]+1\n      }else{chromosomes_1[i] <<- chromosomes_1[i]-1}\n    }\n    a<-sample(100,1)\n    if(a<=mutation_probability){\n      if((chromosomes_2[i]%%2)==1){\n        chromosomes_2[i] <<- chromosomes_2[i]+1\n      }else{chromosomes_2[i] <<- chromosomes_2[i]-1}\n    }\n    a<-sample(100,1)\n    if(a<=mutation_probability){\n      if((chromosomes_3[i]%%2)==1){\n        chromosomes_3[i] <<- chromosomes_3[i]+1\n      }else{chromosomes_3[i] <<- chromosomes_3[i]-1}\n    }\n    a<-sample(100,1)\n    if(a<=mutation_probability){\n      if((chromosomes_4[i]%%2)==1){\n        chromosomes_4[i] <<- chromosomes_4[i]+1\n      }else{chromosomes_4[i] <<- chromosomes_4[i]-1}\n    }\n  }\n  \n  \n}\n\n\n#計算適應值(先利用\"下後左角優先堆疊定則\"確認每個染色體的排序可以依序擺入幾個物品，再去計算每個染色體物品的整體大小)\nfitness <- function(){\n  \n  L <- warehouse[1]\n  W <- warehouse[2]\n  L_Max <- 0\n  i<-1\n  V<-0\n  repeat {\n    if(L>fitness_commodity[1,chromosomes_1[i]]){\n      if(W>fitness_commodity[2,chromosomes_1[i]]){\n        W <- W - fitness_commodity[2,chromosomes_1[i]]\n        if(L_Max<fitness_commodity[1,chromosomes_1[i]]){\n          L_Max <- fitness_commodity[1,chromosomes_1[i]]\n        }\n      }else{\n        L <- L-L_Max\n        L_Max <- 0\n        W <- warehouse[2]\n      }\n    }else{\n      break\n    }\n    i <- i+1\n    if(i>10){\n      break\n    }\n  }\n  for(j in c(1:(i-1))){\n    V<-V+fitness_commodity[1,chromosomes_1[j]]*fitness_commodity[2,chromosomes_1[j]]*fitness_commodity[3,chromosomes_1[j]]\n  }\n  fitness_value[1] <<- V\n  \n  \n  L <- warehouse[1]\n  W <- warehouse[2]\n  L_Max <- 0\n  i<-1\n  V<-0\n  repeat {\n    if(L>fitness_commodity[1,chromosomes_2[i]]){\n      if(W>fitness_commodity[2,chromosomes_2[i]]){\n        W <- W - fitness_commodity[2,chromosomes_2[i]]\n        if(L_Max<fitness_commodity[1,chromosomes_2[i]]){\n          L_Max <- fitness_commodity[1,chromosomes_2[i]]\n        }\n      }else{\n        L <- L-L_Max\n        L_Max <- 0\n        W <- warehouse[2]\n      }\n    }else{\n      break\n    }\n    i <- i+1\n    if(i>10){\n      break\n    }\n  }\n  for(j in c(1:(i-1))){\n    V<-V+fitness_commodity[1,chromosomes_2[j]]*fitness_commodity[2,chromosomes_2[j]]*fitness_commodity[3,chromosomes_2[j]]\n  }\n  fitness_value[2] <<- V\n  \n  \n  L <- warehouse[1]\n  W <- warehouse[2]\n  L_Max <- 0\n  i<-1\n  V<-0\n  repeat {\n    if(L>fitness_commodity[1,chromosomes_3[i]]){\n      if(W>fitness_commodity[2,chromosomes_3[i]]){\n        W <- W - fitness_commodity[2,chromosomes_3[i]]\n        if(L_Max<fitness_commodity[1,chromosomes_3[i]]){\n          L_Max <- fitness_commodity[1,chromosomes_3[i]]\n        }\n      }else{\n        L <- L-L_Max\n        L_Max <- 0\n        W <- warehouse[2]\n      }\n    }else{\n      break\n    }\n    i <- i+1\n    if(i>10){\n      break\n    }\n  }\n  for(j in c(1:(i-1))){\n    V<-V+fitness_commodity[1,chromosomes_3[j]]*fitness_commodity[2,chromosomes_3[j]]*fitness_commodity[3,chromosomes_3[j]]\n  }\n  fitness_value[3] <<- V\n  \n  \n  \n  L <- warehouse[1]\n  W <- warehouse[2]\n  L_Max <- 0\n  i<-1\n  V<-0\n  repeat {\n    if(L>fitness_commodity[1,chromosomes_4[i]]){\n      if(W>fitness_commodity[2,chromosomes_4[i]]){\n        W <- W - fitness_commodity[2,chromosomes_4[i]]\n        if(L_Max<fitness_commodity[1,chromosomes_4[i]]){\n          L_Max <- fitness_commodity[1,chromosomes_4[i]]\n        }\n      }else{\n        L <- L-L_Max\n        L_Max <- 0\n        W <- warehouse[2]\n      }\n    }else{\n      break\n    }\n    i <- i+1\n    if(i>10){\n      break\n    }\n  }\n  for(j in c(1:(i-1))){\n    V<-V+fitness_commodity[1,chromosomes_4[j]]*fitness_commodity[2,chromosomes_4[j]]*fitness_commodity[3,chromosomes_4[j]]\n  }\n  fitness_value[4] <<- V\n  \n  \n  L <- warehouse[1]\n  W <- warehouse[2]\n  L_Max <- 0\n  i<-1\n  V<-0\n  repeat {\n    if(L>fitness_commodity[1,chromosomes_5[i]]){\n      if(W>fitness_commodity[2,chromosomes_5[i]]){\n        W <- W - fitness_commodity[2,chromosomes_5[i]]\n        if(L_Max<fitness_commodity[1,chromosomes_5[i]]){\n          L_Max <- fitness_commodity[1,chromosomes_5[i]]\n        }\n      }else{\n        L <- L-L_Max\n        L_Max <- 0\n        W <- warehouse[2]\n      }\n    }else{\n      break\n    }\n    i <- i+1\n    if(i>10){\n      break\n    }\n  }\n  for(j in c(1:(i-1))){\n    V<-V+fitness_commodity[1,chromosomes_5[j]]*fitness_commodity[2,chromosomes_5[j]]*fitness_commodity[3,chromosomes_5[j]]\n  }\n  fitness_value[5] <<- V\n  \n}\n\n\n#菁英政策\nelite <- function(){\n  chromosomes_5 <<- select_1\n}\n\n\n#選種(選擇適應值最佳的兩個染色體，不選擇兩個同時最高的)\nselect_c <- function(){\n  \n  r <- order(fitness_value)\n  \n  if(r[5]==1){select_1<<-chromosomes_1}\n  if(r[5]==2){select_1<<-chromosomes_2}\n  if(r[5]==3){select_1<<-chromosomes_3}\n  if(r[5]==4){select_1<<-chromosomes_4}\n  if(r[5]==5){select_1<<-chromosomes_5}\n  if(r[4]==1){select_2<<-chromosomes_1}\n  if(r[4]==2){select_2<<-chromosomes_2}\n  if(r[4]==3){select_2<<-chromosomes_3}\n  if(r[4]==4){select_2<<-chromosomes_4}\n  if(r[4]==5){select_2<<-chromosomes_5}\n  if(fitness_value[r[5]]==fitness_value[r[4]]){\n    if(r[1]==1){select_2<<-chromosomes_1}\n    if(r[1]==2){select_2<<-chromosomes_2}\n    if(r[1]==3){select_2<<-chromosomes_3}\n    if(r[1]==4){select_2<<-chromosomes_4}\n    if(r[1]==5){select_2<<-chromosomes_5}\n  }\n}\n\n\n#主程式\nmain <- function(){\n  \n  initialization()#初始化\n  for(i in c(1:frequency)){#執行n次\n    \n    fitness()#計算fitness_value\n    select_c()#選種\n    crossover()#交配\n    mutation()#突變\n    elite()#菁英政策\n    \n  }\n  fitness()#計算最後一次fitness_value(適應值)\n  print(fitness_value[5])#輸出這次計算時最好結果的適應值\n  print(chromosomes_5)#輸出這次計算時最好結果的放入順序\n  \n}",
    "created" : 1481959240366.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3117829581",
    "id" : "F8C87E85",
    "lastKnownWriteTime" : 1482906376,
    "last_content_update" : 1482906376269,
    "path" : "C:/Users/user001/Desktop/weiz/warehousing/main.R",
    "project_path" : "main.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}